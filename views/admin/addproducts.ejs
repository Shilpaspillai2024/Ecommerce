<style>
    .add-product-container {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-content: center;
        min-height: 100vh;
        color: rgb(182, 177, 177);
    }

    .add-product-container form {
        margin-bottom: 5rem;
    }

    .product-form-top {
        display: flex;
        flex-direction: row;
        margin-bottom: 3rem;
        flex-wrap: wrap;

    }

    .product-form-bottom {
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        align-items: center;
        gap: 3rem;

    }

    .product-form-left {
        display: flex;
        flex-direction: column;
        width: 50%;
        margin-top: 3rem;
        align-items: center;
    }

    .product-form-right {
        display: flex;
        flex-direction: column;
        width: 50%;
        margin-top: 3rem;
        align-items: center;
    }

    .product-form-left input,
    .product-form-right input {
        border: 1px solid #c5c5c5;
        outline: none;
        padding: 10px;
        border-radius: 10px;
        width: 90%;
        margin-bottom: 1rem;
    }

    .product-form-left label,
    .product-form-right label {
        width: 90%;
    }

    /* remove the increment and decrement arrows in input type number */
    input[type="number"]::-webkit-inner-spin-button,
    input[type="number"]::-webkit-outer-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }

    #productDescription {
        border: 1px solid #c5c5c5;
        outline: none;
        padding: 10px;
        width: 90%;
        border-radius: 10px;
        resize: vertical;
        min-height: 200px;
    }



    #productCategory {
        border: 1px solid #c5c5c5;
        outline: none;
        padding: 10px;
        border-radius: 10px;
        width: 90%;
    }

    #product-image-preview {
        display: flex;
        flex-direction: row;
        justify-content: space-evenly;
        flex-wrap: wrap;
        width: 90%;
    }

    .product-image-box {
        display: flex;
        flex-direction: column;
        border: 1px solid #c5c5c5;
        border-radius: 10px;
        overflow: hidden;

    }

    .preview-img {
        width: 200px;
        height: 200px;
        object-fit: scale-down;
    }

    .delete-button {
        background-color: #c30606;
        padding: 10px;
        color: #ffffff;
        font-weight: 600;
        border: none;
        outline: none;
    }

    .btn {
        min-width: 150px;
    }


    #cropper-modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    #cropper-container {
        background: white;
        padding: 1rem;
        border-radius: 10px;
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    #cropper-image {
        max-width: 100%;
        max-height: 70vh;
    }

    #cropper-buttons {
        margin-top: 1rem;
        display: flex;
        gap: 1rem;
    }
</style>



<%- include('navbar') %>

    <div class="add-product-container container">
        <div class="product-header mt-5">
            <h2 class="text-center">Add Product</h2>
        </div>
        <form action="/admin/add-product" method="post" enctype="multipart/form-data" id="add-product-form">

            <div class="product-form-top">

                <div class="product-form-left">

                    <!-- input for product name -->
                    <label for="productName" class="form-label">Product Name</label>
                    <input type="text" class="form-control" id="productName" name="productName"
                        placeholder="Excepted min 3 characters" minlength="3" maxlength="100">
                    <div class="validateLabel text-danger" style="color: red; font-weight: bold;"></div>

                    <!-- input for product price -->
                    <label for="productPrice" class="form-label">Product Price</label>
                    <input type="number" class="form-control" id="productPrice" name="productPrice"
                        placeholder="Price is expected between 1 to 100000" min="1" max="100000">
                    <div class="validateLabel text-danger" style="color: red; font-weight: bold;"></div>

                    <!-- input for product quantity -->
                    <label for="productQuantity" class="form-label">Product Quantity</label>
                    <input type="number" class="form-control" id="productQuantity" name="productQuantity"
                        placeholder="Quantity is expected between 1 to 100000" min="0" max="100000">
                    <div class="validateLabel text-danger" style="color: red; font-weight: bold;"></div>

                    
                    <!-- input for select category this category is from backend -->
                    <label for="productCategory" class="form-label">Product Category</label>
                    <select class="form-select" id="productCategory" name="productCategory">
                        <option value="" selected disabled>Select a category</option>
                        <% productCategory.forEach((category)=> { %>

                            <!----for category is blocked then not diplay,use the if ondition,in backened it cleared by find category isActive:true -->
                            <!-- <% if (category.isActive) { %> -->
                            <option value="<%= category.categoryName %>">
                                <%= category.categoryName %>
                            </option>
                            <!-- <% } %> -->
                            <% }) %>
                    </select>
                    <div class="validateLabel text-danger" style="color: red; font-weight: bold;"></div>

                </div>
                <div class="product-form-right">

                    <label for="productAuthor" class="form-label">Product Author</label>
                    <input type="text" class="form-control" id="productAuthor" name="productAuthor"
                        placeholder="Excepted min 3 characters" minlength="3" maxlength="30">
                    <div class="validateLabel text-danger"></div>
                    <!-- input for product description -->
                    <label for="productDescription" class="form-label">Product Description</label>
                    <textarea class="form-control"  id="productDescription" name="productDescription" placeholder="Excepted min 10 characters"
                        minlength="10" maxlength="500"></textarea>

                    <div class="validateLabel text-danger" style="color: red; font-weight: bold;"></div>

                </div>
            </div>
            <div class="product-form-bottom">

                <!-- input file for image upload but the button is display is set as none -->
                <input type="file" id="product-image-upload" name="productImage" accept="image/png, image/jpeg" multiple
                    class="d-none">

                <!-- using the label the image is uploaded -->
                <label for="product-image-upload" class="btn btn-warning">
                    <i class="fas fa-upload"></i> &nbsp; Choose Images
                </label>

                <!-- the product preview will generate based on what we select -->
                <div id="product-image-preview"></div>


                <!-- the form submission and cancel buttons -->
                <div>
                    <a href="/admin/product" class="btn btn-secondary">Cancel</a>
                    <button class="btn btn-success" type="submit">Add Product</button>
                </div>
            </div>
        </form>


    </div>
    <!-- cropper -->
    <div id="cropper-modal">
        <div id="cropper-container">
            <img id="cropper-image">
            <div id="cropper-buttons">
                <button id="crop-cancel" class="btn btn-secondary">Cancel</button>
                <button id="crop-confirm" class="btn btn-primary">Crop</button>
            </div>
        </div>
    </div>

    <%- include('footer') %>




        <script>
            const addProductForm = document.getElementById('add-product-form')
            const productName = document.getElementsByName('productName')[0];
            const productPrice = document.getElementsByName('productPrice')[0];
            const productQuantity = document.getElementsByName('productQuantity')[0];
            const productAuthor = document.getElementsByName('productAuthor')[0];
            const productDescription = document.getElementsByName('productDescription')[0];
            const productCategory = document.getElementsByName('productCategory')[0];
            const validateDivs = document.querySelectorAll('.validateLabel')



            addProductForm.addEventListener('submit', (e) => {
                e.preventDefault()


                validateDivs.forEach((div) => {
                    div.innerHTML = ""
                })



                let isValid = true


                if (document.getElementById('product-image-upload').value === '') {

                    isValid = false;

                    Swal.fire({
                        title: "Invalid Inputs",
                        text: "Product image should not be empty",
                        icon: "error",
                        showConfirmButton: false,
                        timer: 800
                    })
                }
                if (productName.value.trim() === "" || productName.value.length <= 3 || !isNaN(productName.value)) {
                    document.getElementsByClassName('validateLabel')[0].innerHTML = "Please provide a valid product name (min 3 characters).";
                    isValid = false;
                }

                if (isNaN(productPrice.value) || parseFloat(productPrice.value) <= 0  || productPrice.value.length < 1) {
                    document.getElementsByClassName('validateLabel')[1].innerHTML = "Please provide a valid price (between 1 and 100000).";
                    isValid = false;
                }



                if (isNaN(productQuantity.value) || parseInt(productQuantity.value) <= 0 || productQuantity.value.length < 1) {
                    document.getElementsByClassName('validateLabel')[2].innerHTML = "Please provide a valid quantity (between 1 and 100000).";
                    isValid = false;
                }

                if (productCategory.value === null || productCategory.value === "") {
                    document.getElementsByClassName('validateLabel')[3].innerHTML = "Please select a category.";
                    isValid = false
                }



                if (productAuthor.value.trim() === '' || productAuthor.value.length <= 0 || !isNaN(productAuthor.value)) {
                    document.getElementsByClassName('validateLabel')[4].innerHTML = "Please provide a Author name min 3 characters.";
                    isValid = false
                }

                if (productDescription.value.length <= 10 || productDescription.value.length > 500 || productDescription.value.trim === "") {
                    document.getElementsByClassName('validateLabel')[5].innerHTML = "Please provide a valid description (min 10 characters).";
                    isValid = false
                }

                if (isValid) {
                    addProductForm.submit()
                }
                })

            



            let cropper;
            const productImageUpload = document.getElementById('product-image-upload');
            const productImagePreview = document.getElementById('product-image-preview');
            const cropperModal = document.getElementById('cropper-modal');
            const cropperImage = document.getElementById('cropper-image');
            const cropCancel = document.getElementById('crop-cancel');
            const cropConfirm = document.getElementById('crop-confirm');
            let files = [];
            let currentFileIndex;

            productImageUpload.addEventListener('change', () => {
                productImagePreview.innerHTML = '';
                files = Array.from(productImageUpload.files);
                if (files.length > 4) {
                    Swal.fire({
                        icon: "error",
                        title: "Oops...",
                        text: "Maximum file count is 4",
                    });
                    productImageUpload.value = '';
                    files = [];
                    return;
                }
                if (files.length === 0) {
                    Swal.fire({
                        icon: "error",
                        title: "Oops...",
                        text: "Minimum file count is 1",
                    });
                    productImageUpload.value = '';
                    files = [];
                    return;
                }
                files.forEach((file, index) => {
                    const reader = new FileReader();
                    reader.onload = (e) => {
                        const imgElement = document.createElement('img');
                        imgElement.src = e.target.result;
                        imgElement.classList.add('preview-img');

                        const imageBox = document.createElement('div');
                        imageBox.classList.add('product-image-box');
                        imageBox.appendChild(imgElement);

                        const deleteButton = document.createElement('button');
                        deleteButton.textContent = 'Delete';
                        deleteButton.classList.add('delete-button');
                        deleteButton.addEventListener('click', () => {
                            files.splice(index, 1);
                            imageBox.remove();
                        });
                        imageBox.appendChild(deleteButton);

                        productImagePreview.appendChild(imageBox);

                        imgElement.addEventListener('click', () => {
                            cropperImage.src = e.target.result;
                            cropperModal.style.display = 'flex';
                            cropper = new Cropper(cropperImage, {
                                aspectRatio: 0,
                                viewMode: 0,
                                autoCropArea: 1
                            });
                            currentFileIndex = index;
                            // currentFileIndex = files.indexOf(file);
                        });
                    };
                    reader.readAsDataURL(file);
                });
            });

            cropCancel.addEventListener('click', () => {
                cropperModal.style.display = 'none';
                cropper.destroy();
            });

            cropConfirm.addEventListener('click', () => {
                const canvas = cropper.getCroppedCanvas();
                canvas.toBlob((blob) => {
                    const croppedFile = new File([blob], files[currentFileIndex].name, { type: 'image/jpeg' });
                    files[currentFileIndex] = croppedFile;

                    const reader = new FileReader();
                    reader.onload = (e) => {
                        const imgElement = productImagePreview.children[currentFileIndex].querySelector('.preview-img');
                        // const imgElement = cropperImage.parentElement.querySelector('.preview-img');
                        imgElement.src = e.target.result;
                    };


                    reader.readAsDataURL(croppedFile);

                    cropperModal.style.display = 'none';
                    cropper.destroy();
                });
            });

            addProductForm.addEventListener('submit', (e) => {
                if (files.length === 0) {
                    Swal.fire({
                        icon: "error",
                        title: "Oops...",
                        text: "Please upload at least one image",
                    });
                    e.preventDefault();
                } else {
                    const formData = new FormData(addProductForm);
                    files.forEach(file => {
                        formData.append('productImages', file);
                    });

                    e.preventDefault();
                }
            });





        </script>